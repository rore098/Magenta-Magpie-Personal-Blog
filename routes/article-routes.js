const express = require("express");
const upload = require("../modules/multer-uploader");
const categoryDao = require("../modules/categories-dao.js");
const articleDao = require("../modules/articles-dao.js");
const userDao = require("../modules/users-dao.js");
const commentsDao = require("../modules/comments-dao.js");
const paginate = require("../middleware/pagination-middleware");

// Setup File System
const fs = require("fs");
const jimp = require("jimp");

// Setup an express Router
const router = express.Router();

const imageRootDirectory = './public/images/articles';

router.get("/add", function (req, res) {
    res.locals.isAdd = true;
    res.render("add-edit-article");
});

// Called by tinymce to upload images
router.post("/images/upload", upload.single("file"), async function (req, res) {

    const file = req.file;

    // A unique filename is generated by multer
    // We'll just use this same filename when moving the images to the uploads folder
    // We should have unique image filenames for all articles
    const uniqueFilename = file.filename;
    const originalFilename = file.originalname;
    const dotIndex = originalFilename.lastIndexOf(".");
    const fileExtension = originalFilename.substr(dotIndex, originalFilename.length - dotIndex);
    const newFilename = uniqueFilename + fileExtension;

    // Transfer images from temp to uploads folder
    const oldPath = file.path;
    const newPath = `${imageRootDirectory}/uploads/${newFilename}`;

    fs.renameSync(oldPath, newPath);

    res.json({location: `/images/articles/uploads/${newFilename}`});
});


router.post(["/add", "/edit"], upload.single("coverPhoto"), async function (req, res) {

    const article = req.body;

    // Move temp file to public folder
    const file = req.file;

    if (file !== undefined) {

        const oldFileName = file.path;
        const newFileName = `${imageRootDirectory}/${file.originalname}`;
        fs.renameSync(oldFileName, newFileName);

        const thumbnail = await jimp.read(newFileName);
        await thumbnail.resize(320, jimp.AUTO);
        await thumbnail.writeAsync(`${imageRootDirectory}/thumbnails/${file.originalname}`);

        article.coverPhoto = file.originalname;
    }

    article.createdBy = res.locals.user.id;

    await articleDao.createOrUpdateArticle(article);

    let toastMessage = "Article successfully created!";

    if (req.url === "/edit") {
        toastMessage = "Article successfully updated!";
    }

    res.setToastMessage({message: toastMessage, type: "success"});

    res.redirect("/admin");

});

router.get("/:articleId/edit", async function (req, res) {
    const articleId = req.params.articleId;
    res.locals.article = await articleDao.getArticleById(articleId);
    res.locals.inEditArticle = true; // Use to display the proper message in the confirmation message modal
    res.render("add-edit-article");
});

router.get("/:articleId", async function (req, res) {
    const articleId = req.params.articleId;
    res.locals.article = await articleDao.getArticleById(articleId);
    res.locals.author = await userDao.retrieveUserById(res.locals.article.createdBy);
    res.locals.otherArticles = await articleDao.getOtherArticles(articleId);

    const comments = await commentsDao.getCommentsForArticle(articleId);

    // inject replies to comments
    for (let i = 0; i < comments.length; i++) {
        const c = comments[i];
        c.replies = await commentsDao.getCommentReplies(c.id);
    }

    res.locals.filledComments = comments;
    const countJson = await commentsDao.getCommentsCountByArticleId(articleId);
    res.locals.commentsCount = parseInt(countJson.count);

    if (req.cookies.currentArticle != undefined) {
        res.clearCookie("currentArticle");
    }
    res.cookie("currentArticle", articleId);
    res.render("article-full");
});

router.get("/:articleId/delete", async function (req, res) {
    const articleId = req.params.articleId;
    await articleDao.deleteArticleById(articleId);
    res.setToastMessage({message: "Article has been deleted!", type: "success"});
    res.redirect("/admin");
});

router.get("/category/:categoryId", paginate(), async function (req, res) {

    const categoryId = req.params.categoryId;
    const category = await categoryDao.getCategoryById(categoryId);
    const targetPath = `/articles/category/${categoryId}`;

    res.locals.onCategories = true;
    res.locals.category = category;
    res.locals.paginatedResults.targetUrl = {path: targetPath, anchor: "top"};
    res.render("articles-by-category");
});

router.get("/author/:authorId", paginate(), async function (req, res) {

    const authorId = req.params.authorId;
    const author = await userDao.retrieveUserById(authorId);
    const targetPath = `/articles/author/${authorId}`;

    res.locals.author = author;
    res.locals.paginatedResults.targetUrl = {path: targetPath, anchor: "top"};
    res.render("articles-by-author");
});

router.post(["/comments", "/comments/:commentId/reply"], async function (req, res) {

    let guestUser = null;
    if (req.body.name !== undefined) {
        guestUser = req.body.name;
    }

    let registeredUser = null;
    if (res.locals.user !== undefined) {
        registeredUser = res.locals.user.id;
    }

    let replyToComment = null;
    if (req.url !== "/comments") {
        replyToComment = req.params.commentId;
    }

    const articleId = parseInt(req.cookies.currentArticle);

    const comments = {
        guestUser: guestUser,
        registeredUser: registeredUser,
        comments: req.body.comments,
        articleId: articleId,
        replyToComment: replyToComment
    }

    await commentsDao.addCommentsToTable(comments);

    res.setToastMessage({message: "Successfully added a comment", type: "success"});

    res.redirect(`/articles/${articleId}`);
});

router.post("/comments/:commentId/edit", async function (req, res) {

    const commentId = req.params.commentId;
    const comment = req.body.comments;
    const articleId = parseInt(req.cookies.currentArticle);

    await commentsDao.updateComment(commentId, comment);

    res.setToastMessage({message: "Successfully edited your comment", type: "success"});

    res.redirect(`/articles/${articleId}`);
});

router.get(["/comments/:commentId/delete", "/comments/:commentId/deleteAll"], async function (req, res) {

    const commentId = req.params.commentId;
    const articleId = parseInt(req.cookies.currentArticle);

    if (req.path.indexOf("deleteAll") > 0) {
        await commentsDao.deleteAllCommentsById(commentId);
    } else {
        await commentsDao.deleteACommentById(commentId);
    }

    res.setToastMessage({message: "Successfully deleted your comment", type: "success"});

    res.redirect(`/articles/${articleId}`);

});

module.exports = router;